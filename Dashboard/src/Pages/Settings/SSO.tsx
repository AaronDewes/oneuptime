import Route from 'Common/Types/API/Route';
import Page from 'CommonUI/src/Components/Page/Page';
import React, { FunctionComponent, ReactElement } from 'react';
import PageMap from '../../Utils/PageMap';
import RouteMap, { RouteUtil } from '../../Utils/RouteMap';
import PageComponentProps from '../PageComponentProps';
import DashboardSideMenu from './SideMenu';
import ModelTable from 'CommonUI/src/Components/ModelTable/ModelTable';
import DropdownUtil from 'CommonUI/src/Utils/Dropdown';
import FieldType from 'CommonUI/src/Components/Types/FieldType';
import FormFieldSchemaType from 'CommonUI/src/Components/Forms/Types/FormFieldSchemaType';
import IconProp from 'Common/Types/Icon/IconProp';
import DashboardNavigation from '../../Utils/Navigation';
import Navigation from 'CommonUI/src/Utils/Navigation';
import ProjectSSO from 'Model/Models/ProjectSso';
import SignatureMethod from 'Common/Types/SSO/SignatureMethod';
import DigestMethod from 'Common/Types/SSO/DigestMethod';
import CardModelDetail from 'CommonUI/src/Components/ModelDetail/CardModelDetail';
import Project from 'Model/Models/Project';

const SSOPage: FunctionComponent<PageComponentProps> = (
    _props: PageComponentProps
): ReactElement => {
    return (
        <Page
            title={'Project Settings'}
            breadcrumbLinks={[
                {
                    title: 'Project',
                    to: RouteUtil.populateRouteParams(
                        RouteMap[PageMap.HOME] as Route
                    ),
                },
                {
                    title: 'Settings',
                    to: RouteUtil.populateRouteParams(
                        RouteMap[PageMap.SETTINGS] as Route
                    ),
                },
                {
                    title: 'SSO',
                    to: RouteUtil.populateRouteParams(
                        RouteMap[PageMap.SETTINGS_SSO] as Route
                    ),
                },
            ]}
            sideMenu={<DashboardSideMenu />}
        >
            <ModelTable<ProjectSSO>
                modelType={ProjectSSO}
                query={{
                    projectId: DashboardNavigation.getProjectId()?.toString(),
                }}
                id="sso-table"
                name="Settings > Project SSO"
                isDeleteable={true}
                isEditable={true}
                isCreateable={true}
                cardProps={{
                    icon: IconProp.Lock,
                    title: 'Single Sign On (SSO)',
                    description:
                        'Single sign-on is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems.',
                }}
                noItemsMessage={'No SSO configuration found.'}
                viewPageRoute={Navigation.getCurrentRoute()}
                formFields={[
                    {
                        field: {
                            name: true,
                        },
                        title: 'Name',
                        fieldType: FormFieldSchemaType.Text,
                        required: true,
                        description: 'Friendly name to help you remember.',
                        placeholder: 'Okta',
                        validation: {
                            minLength: 2,
                        },
                    },
                    {
                        field: {
                            signOnURL: true,
                        },
                        title: 'Sign On URL',
                        fieldType: FormFieldSchemaType.URL,
                        required: true,
                        description:
                            'Members will be forwarded here when signing in to your organization',
                        placeholder: 'https://yourapp.example.com/apps/appId',
                    },
                    {
                        field: {
                            issuerURL: true,
                        },
                        title: 'Issuer',
                        description:
                            'Typically a unique URL generated by your SAML identity provider',
                        fieldType: FormFieldSchemaType.URL,
                        required: true,
                        placeholder: 'https://example.com',
                    },
                    {
                        field: {
                            publicCertificate: true,
                        },
                        title: 'Public Certificate',
                        description: 'Paste in your x509 certificate here.',
                        fieldType: FormFieldSchemaType.LongText,
                        required: true,
                        placeholder: 'Paste in your x509 certificate here.',
                    },
                    {
                        field: {
                            signatureMethod: true,
                        },
                        title: 'Signature Method',
                        description:
                            'If you do not know what this is, please leave this to RSA-SHA256',
                        fieldType: FormFieldSchemaType.Dropdown,
                        dropdownOptions:
                            DropdownUtil.getDropdownOptionsFromEnum(
                                SignatureMethod
                            ),
                        required: true,
                        placeholder: 'RSA-SHA256',
                    },
                    {
                        field: {
                            digestMethod: true,
                        },
                        title: 'Digest Method',
                        description:
                            'If you do not know what this is, please leave this to SHA256',
                        fieldType: FormFieldSchemaType.Dropdown,
                        dropdownOptions:
                            DropdownUtil.getDropdownOptionsFromEnum(
                                DigestMethod
                            ),
                        required: true,
                        placeholder: 'SHA256',
                    },
                    {
                        field: {
                            isEnabled: true,
                        },
                        description:
                            'You can test this first, before enabling it. To test, please save the config.',
                        title: 'Enabled',
                        fieldType: FormFieldSchemaType.Toggle,
                    },
                ]}
                showRefreshButton={true}
                showFilterButton={true}
                columns={[
                    {
                        field: {
                            name: true,
                        },
                        title: 'Name',
                        type: FieldType.Text,
                        isFilterable: true,
                    },
                    {
                        field: {
                            isEnabled: true,
                        },
                        title: 'Enabled',
                        type: FieldType.Boolean,
                        isFilterable: true,
                    },
                ]}
            />

             {/* API Key View  */}
             <CardModelDetail
                name="SSO Settings"
                editButtonText={"Edit Settings"}
                cardProps={{
                    title: 'SSO Settings',
                    description: "Configure settings for SSO.",
                    icon: IconProp.Lock,
                }}
                isEditable={true}
                formFields={[
                    {
                        field: {
                            requireSsoForLogin: true,
                        },
                        title: 'Force SSO for Login',
                        description: "Please test SSO before you you enable this feature. If SSO is not tested properly then you will be locked out of the project.", 
                        fieldType: FormFieldSchemaType.Toggle,
                    },
                ]}
                modelDetailProps={{
                    modelType: Project,
                    id: 'sso-settings',
                    fields: [
                        {
                            field: {
                                requireSsoForLogin: true,
                            },
                            fieldType: FieldType.Boolean,
                            title: 'Force SSO for Login',
                            description: "Please test SSO before you enable this feature. If SSO is not tested properly then you will be locked out of the project.", 
                        },
                    ],
                    modelId: DashboardNavigation.getProjectId()?.toString(),
                }}
            />

            
        </Page>
    );
};

export default SSOPage;
