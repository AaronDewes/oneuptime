# IMPORTANT:
#
# This CI/CD will run on an Ubuntu VM. After this script runs, the VM will retain the state.
# It's your responsibility to clean the VM up in the cleanup stage after job finishes executing.
# This script runs on Microk8s. since our deployments are on Kubernetes, our aim is to create EXACT same replica for test, staging and production.

# Define stages
stages:
  # - BuildAndTest
  # - E2E
  - VersionUpdate
  # - DeployStaging
  # - RollbackIfStagingDeploymentFail
  # - DeployProduction
  # - SmokeTest
  # - RollbackStaging
  # - RollbackProduction
# #BACKEND
# lint_n_audit_backend:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd backend
#     - npm ci
#     - npm run lint
#     # - npm run audit
#     - cd ..

# build_n_test_backend:
#   stage: BuildAndTest
#   script:
#     - sudo docker stop $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker rm $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker run --name mongo -p 27017:27017 -d mongo:3.4
#     - sudo docker build -t fyipe-project/backend:3.0.$CI_PIPELINE_IID ./backend
#     - sudo docker run --name fyipe --network container:mongo fyipe-project/backend:3.0.$CI_PIPELINE_IID npm test

# ##DASHBOARD
# lint_n_audit_dashboard:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd dashboard
#     - npm ci
#     - npm run lint
#     # - npm run audit
#     - cd ..

# build_n_test_dashboard:
#   stage: BuildAndTest
#   script:
#     - echo "Setup machine for running puppeteer tests"
#     - sudo docker stop $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker rm $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker run --name mongo -p 27017:27017 -d mongo:3.4
#     - sudo docker build -t fyipe-project/backend:3.0.$CI_PIPELINE_IID ./backend
#     - sudo docker run --env-file ./backend/.env.development --net=host -d fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     - sudo docker build -t fyipe-project/accounts:3.0.$CI_PIPELINE_IID ./accounts
#     - sudo docker run -p 3003:3003 -d fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     - sudo docker build -t fyipe-project/dashboard:3.0.$CI_PIPELINE_IID ./dashboard
#     - sudo docker run -p 3000:3000 -d fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker ps
#     - cd dashboard
#     - npm ci
#     - npm run jest

# ##ZAPIER
# lint_n_audit_zapier:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd zapier
#     - npm ci
#     - npm run lint
#     - npm run audit
#     - cd ..

# build_n_test_zapier:
#   stage: BuildAndTest
#   script:
#     - echo "No test implemented"

# ## STATUS PAGE
# lint_n_audit_statuspage:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd status-page
#     - npm ci
#     - npm run lint
#     - npm run audit
#     - cd ..

# build_n_test_statuspage:
#   stage: BuildAndTest
#   script:
#     - echo "Setup machine for running puppeteer tests"
#     - sudo docker stop $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker rm $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker run --name mongo -p 27017:27017 -d mongo:3.4
#     - sudo docker build -t fyipe-project/backend:3.0.$CI_PIPELINE_IID ./backend
#     - sudo docker run --env-file ./backend/.env.development --net=host -d fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     - sudo docker build -t fyipe-project/status-page:3.0.$CI_PIPELINE_IID ./status-page
#     - sudo docker run -p 3006:3006 -d fyipe-project/status-page:3.0.$CI_PIPELINE_IID
#     - sudo docker ps
#     - cd backend
#     - npm ci
#     - cd ..
#     - cd status-page
#     - npm ci
#     - sleep 1m
#     - curl localhost:3006
#     - npm run jest

# ## ACCOUNTS
# lint_n_audit_accounts:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd accounts
#     - npm ci
#     - npm run lint
#     - npm run audit
#     - cd ..

# build_n_test_accounts:
#   stage: BuildAndTest
#   script:
#     - echo "Setup machine for running puppeteer tests"
#     - sudo docker stop $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker rm $(sudo docker ps -aq) || echo 'No docker containers'
#     - sudo docker run --name mongo -p 27017:27017 -d mongo:3.4
#     - sudo docker build -t fyipe-project/backend:3.0.$CI_PIPELINE_IID ./backend
#     - sudo docker run --env-file ./backend/.env.development --net=host -d fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     - sudo docker build -t fyipe-project/accounts:3.0.$CI_PIPELINE_IID ./accounts
#     - sudo docker run -p 3003:3003 -d fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     - sudo docker build -t fyipe-project/dashboard:3.0.$CI_PIPELINE_IID ./dashboard
#     - sudo docker run -p 3000:3000 -d fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker ps
#     - cd accounts
#     - npm ci
#     - npm run jest

# ## HOME
# lint_n_audit_home:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd home
#     - npm ci
#     - npm run lint
#     - npm run audit
#     - cd ..

# build_n_test_home:
#   stage: BuildAndTest
#   script:
#     - echo "No test implemented"

# ## PROBE
# lint_n_audit_probe:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd probe
#     - npm ci
#     - npm run lint
#     - npm run audit
#     - cd ..

# build_n_test_probe:
#   stage: BuildAndTest
#   script:
#     - echo "No test implemented"

# ## SERVER MONITOR
# lint_n_audit_server-monitor:
#   stage: BuildAndTest
#   script:
#     - sudo apt-get install nodejs -y
#     - cd server-monitor
#     - npm ci
#     - npm run lint
#     - npm run audit
#     - cd ..

# build_n_test_server-monitor:
#   stage: BuildAndTest
#   script:
#     - echo "No test implemented"

# ##E2E Stage.
# e2e_test:
#   stage: E2E
#   script:
#     - chmod +x ./kubernetes/ci/setup-machine.sh
#     - ./kubernetes/ci/setup-machine.sh
#     - chmod +x ./kubernetes/ci/setup.sh
#     - ./kubernetes/ci/setup.sh
#     - export HOME_URL=http://home.app.local:1444
#     - export ACCOUNTS_URL=http://accounts.app.local:3003
#     - export DASHBOARD_URL=http://dashboard.app.local:3000
#     - export BACKEND_URL=http://backend.app.local:3002
#     - export STATUSPAGE_URL=http://status-page.app.local:3006
#     - export APIDOCS_URL=http://api-docs.app.local:1445
#     - chmod +x ./kubernetes/ci/hosts-setup.sh
#     - ./kubernetes/ci/hosts-setup.sh
#     - cd smoke-test
#     - npm ci
#     - npm run test

#   only:
#     refs:
#       - release
#       - master

# VERSION UPDATE
version_update:
  before_script:
    - cd ..
    - rm -rf app
    - git clone https://$GIT_USERNAME:$GIT_PASSWORD@gitlab.com/fyipe-project/app.git
    - cd app
    - git remote set-url origin https://$GIT_USERNAME:$GIT_PASSWORD@gitlab.com/fyipe-project/app.git
  stage: VersionUpdate
  script:
    - curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
    - sudo apt install nodejs  
    - git checkout $CI_COMMIT_REF_NAME
    - chmod +x ./kubernetes/ci/version-setup.sh
    - ./kubernetes/ci/version-setup.sh
    - git add . 
    - git commit -m 'Version Update [skip ci]'
    - git push origin $CI_COMMIT_REF_NAME
  only:
    refs:
      - master
      - release
      - hotfix-master
      - hotfix-release
      - CI/CD-refactor

# # DEPLOYMENT STAGE - BACKEND
# deploy_staging_backend:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy backend.
#     - sudo docker build -t fyipe-project/backend:master ./backend
#     - sudo docker tag fyipe-project/backend:master registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/backend:master registry.gitlab.com/fyipe-project/backend:master
#     - sudo docker push registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/backend:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/backend backend=registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_backend:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/backend:latest ./backend
#     - sudo docker tag fyipe-project/backend:latest registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/backend:latest registry.gitlab.com/fyipe-project/backend:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/backend:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/backend backend=registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# # DEPLOYMENT STAGE - Api docs
# deploy_staging_api-docs:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy api-docs.
#     - sudo docker build -t fyipe-project/api-docs:master ./api-docs
#     - sudo docker tag fyipe-project/api-docs:master registry.gitlab.com/fyipe-project/api-docs:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/api-docs:master registry.gitlab.com/fyipe-project/api-docs:master
#     - sudo docker push registry.gitlab.com/fyipe-project/api-docs:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/api-docs:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/api-docs api-docs=registry.gitlab.com/fyipe-project/api-docs:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_api-docs:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/api-docs:latest ./api-docs
#     - sudo docker tag fyipe-project/api-docs:latest registry.gitlab.com/fyipe-project/api-docs:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/api-docs:latest registry.gitlab.com/fyipe-project/api-docs:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/api-docs:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/api-docs:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/api-docs api-docs=registry.gitlab.com/fyipe-project/api-docs:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# # DEPLOYMENT STAGE - Home
# deploy_staging_home:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy home.
#     - sudo docker build -t fyipe-project/home:master ./home
#     - sudo docker tag fyipe-project/home:master registry.gitlab.com/fyipe-project/home:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/home:master registry.gitlab.com/fyipe-project/home:master
#     - sudo docker push registry.gitlab.com/fyipe-project/home:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/home:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/home home=registry.gitlab.com/fyipe-project/home:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_home:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/home:latest ./home
#     - sudo docker tag fyipe-project/home:latest registry.gitlab.com/fyipe-project/home:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/home:latest registry.gitlab.com/fyipe-project/home:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/home:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/home:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/home home=registry.gitlab.com/fyipe-project/home:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# # DEPLOYMENT STAGE - Probe
# deploy_staging_probe:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy probe.
#     - sudo docker build -t fyipe-project/probe:master ./probe
#     - sudo docker tag fyipe-project/probe:master registry.gitlab.com/fyipe-project/probe:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/probe:master registry.gitlab.com/fyipe-project/probe:master
#     - sudo docker push registry.gitlab.com/fyipe-project/probe:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/probe:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/probe probe=registry.gitlab.com/fyipe-project/probe:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_probe:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/probe:latest ./probe
#     - sudo docker tag fyipe-project/probe:latest registry.gitlab.com/fyipe-project/probe:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/probe:latest registry.gitlab.com/fyipe-project/probe:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/probe:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/probe:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/probe probe=registry.gitlab.com/fyipe-project/probe:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# # DEPLOYMENT STAGE - status-page
# deploy_staging_status-page:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy status-page.
#     - sudo docker build -t fyipe-project/status-page:master ./status-page
#     - sudo docker tag fyipe-project/status-page:master registry.gitlab.com/fyipe-project/status-page:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/status-page:master registry.gitlab.com/fyipe-project/status-page:master
#     - sudo docker push registry.gitlab.com/fyipe-project/status-page:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/status-page:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/status-page status-page=registry.gitlab.com/fyipe-project/status-page:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_status-page:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/status-page:latest ./status-page
#     - sudo docker tag fyipe-project/status-page:latest registry.gitlab.com/fyipe-project/status-page:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/status-page:latest registry.gitlab.com/fyipe-project/status-page:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/status-page:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/status-page:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/status-page status-page=registry.gitlab.com/fyipe-project/status-page:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# # DEPLOYMENT STAGE - Admin Dashboard
# deploy_staging_admin-dashboard:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy admin-dashboard.
#     - sudo docker build -t fyipe-project/admin-dashboard:master ./admin-dashboard
#     - sudo docker tag fyipe-project/admin-dashboard:master registry.gitlab.com/fyipe-project/admin-dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/admin-dashboard:master registry.gitlab.com/fyipe-project/admin-dashboard:master
#     - sudo docker push registry.gitlab.com/fyipe-project/admin-dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/admin-dashboard:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/admin-dashboard admin-dashboard=registry.gitlab.com/fyipe-project/admin-dashboard:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_admin-dashboard:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/admin-dashboard:latest ./admin-dashboard
#     - sudo docker tag fyipe-project/admin-dashboard:latest registry.gitlab.com/fyipe-project/admin-dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/admin-dashboard:latest registry.gitlab.com/fyipe-project/admin-dashboard:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/admin-dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/admin-dashboard:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/admin-dashboard admin-dashboard=registry.gitlab.com/fyipe-project/admin-dashboard:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# # DEPLOYMENT STAGE - Accounts
# deploy_staging_accounts:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy accounts.
#     - sudo docker build -t fyipe-project/accounts:master ./accounts
#     - sudo docker tag fyipe-project/accounts:master registry.gitlab.com/fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/accounts:master registry.gitlab.com/fyipe-project/accounts:master
#     - sudo docker push registry.gitlab.com/fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/accounts:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/accounts accounts=registry.gitlab.com/fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_accounts:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/accounts:latest ./accounts
#     - sudo docker tag fyipe-project/accounts:latest registry.gitlab.com/fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/accounts:latest registry.gitlab.com/fyipe-project/accounts:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/accounts:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/accounts accounts=registry.gitlab.com/fyipe-project/accounts:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# # DEPLOYMENT STAGE - Dashboard
# deploy_staging_dashboard:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Build and deploy dashboard.
#     - sudo docker build -t fyipe-project/dashboard:master ./dashboard
#     - sudo docker tag fyipe-project/dashboard:master registry.gitlab.com/fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/dashboard:master registry.gitlab.com/fyipe-project/dashboard:master
#     - sudo docker push registry.gitlab.com/fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/dashboard:master
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/dashboard dashboard=registry.gitlab.com/fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_dashboard:
#   stage: DeployProduction
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-production-setup.sh
#     - ./kubernetes/ci/deployment-production-setup.sh
#     - sudo docker build -t fyipe-project/dashboard:latest ./dashboard
#     - sudo docker tag fyipe-project/dashboard:latest registry.gitlab.com/fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker tag fyipe-project/dashboard:latest registry.gitlab.com/fyipe-project/dashboard:latest
#     - sudo docker push registry.gitlab.com/fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     - sudo docker push registry.gitlab.com/fyipe-project/dashboard:latest
#     - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/dashboard dashboard=registry.gitlab.com/fyipe-project/dashboard:3.0.$CI_PIPELINE_IID
#     # Cleanup
#     - chmod +x ./kubernetes/ci/deployment-cleanup.sh
#     - ./kubernetes/ci/deployment-cleanup.sh
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# ## DEPLOYMENT STAGE - Server Monitor
# deploy_staging_server-monitor:
#   stage: DeployStaging
#   allow_failure: true
#   script:
#     - sudo apt-get install nodejs -y
#     - cd server-monitor
#     - sudo npm install -g json
#     - git checkout $CI_COMMIT_REF_NAME
#     - git pull https://$GIT_USERNAME:$GIT_PASSWORD@gitlab.com/fyipe-project/app
#     - json -I -f package.json -e 'this.name="fyipe-server-monitor-staging"'
#     - echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
#     - npm publish
#     - cd ..
#   only:
#     refs:
#       - master
#       - hotfix-master
#       - CI/CD-refactor
#   environment:
#     name: staging

# deploy_production_server-monitor:
#   stage: DeployProduction
#   script:
#     - sudo apt-get install nodejs -y
#     - cd server-monitor
#     - echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
#     - npm publish
#     - cd ..
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# rollback_if_staging_deployment_fails:
#     stage: RollbackIfStagingDeploymentFail
#     script:
#       - chmod +x ./kubernetes/ci/deployment-setup.sh
#       - ./kubernetes/ci/deployment-setup.sh
#       - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#       - ./kubernetes/ci/deployment-staging-setup.sh
#       - chmod +x ./kubernetes/ci/staging-rollback.sh
#       - ./kubernetes/ci/staging-rollback.sh
#     only:
#       refs:
#         - master
#         - hotfix-master
#         - CI/CD-refactor

# ## SMOKE TEST STAGE
# smoke_test_production:
#   stage: SmokeTest
#   script:
#     - echo "No test implemented"
#   only:
#     refs:
#       - release
#   environment:
#     name: production

# smoke_test_staging:
#   stage: SmokeTest
#   allow_failure: true
#   script:
#     - export HOME_URL=https://staging.fyipe.com
#     - export ACCOUNTS_URL=https://staging-accounts.fyipe.com
#     - export DASHBOARD_URL=https://staging-dashboard.fyipe.com
#     - export BACKEND_URL=https://staging-api.fyipe.com
#     - export STATUSPAGE_URL=https://staging-statuspage.fyipe.com
#     - export APIDOCS_URL=https://staging-api-docs.fyipe.com
#     - cd smoke-test
#     - npm ci
#     - npm run test
#       # if job is successs, cancel the next jobs in pipeline.
#     - curl --request POST --header PRIVATE-TOKEN:$PERSONAL_ACCESS_TOKEN https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/cancel
#   only:
#     refs:
#       - master
#       - hotfix-master

# ## STAGING ROLLBACK
# staging_rollback_dashboard:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback dashboard
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/dashboard
#   only:
#     refs:
#       - master

# staging_rollback_accounts:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback accounts
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/accounts
#   only:
#     refs:
#       - master

# staging_rollback_backend:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback backend
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/backend
#   only:
#     refs:
#       - master

# staging_rollback_home:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback home
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/home
#   only:
#     refs:
#       - master

# staging_rollback_status-page:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback status-page
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/status-page
#   only:
#     refs:
#       - master

# staging_rollback_api-docs:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback api-docs
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/api-docs
#   only:
#     refs:
#       - master

# staging_rollback_admin-dashboard:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback admin-dashboard
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/admin-dashboard
#   only:
#     refs:
#       - master

# staging_rollback_probe:
#   stage: RollbackStaging
#   script:
#     - chmod +x ./kubernetes/ci/deployment-setup.sh
#     - ./kubernetes/ci/deployment-setup.sh
#     - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
#     - ./kubernetes/ci/deployment-staging-setup.sh
#     # Rollback probe
#     - chmod +x ./kubernetes/ci/job-status.sh
#     - export smoke_test_staging_status=`./kubernetes/ci/job-status.sh smoke_test_staging`
#     - if [[ $smoke_test_staging_status == \"success\" ]]; then exit 0; fi
#     - sudo $HOME/google-cloud-sdk/bin/kubectl rollout undo deployment/probe
#   only:
#     refs:
#       - master

# ## PRODUCTION ROLLBACK
# production_rollback:
#   stage: RollbackProduction
#   script:
#     - echo "No rollback implemented"
#   only:
#     refs:
#       - release
#   environment:
#     name: production
