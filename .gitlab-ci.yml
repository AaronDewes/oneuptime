# IMPORTANT:
#
# This CI/CD will run on an Ubuntu VM. After this script runs, the VM will retain the state.
# It's your responsibility to clean the VM up in the cleanup stage after job finishes executing.
# This script runs on Microk8s. since our deployments are on Kubernetes, our aim is to create EXACT same replica for test, staging and production.
# Define stages

stages:
  - Build_n_Test
  - E2E_test
  - Deploy_Staging
  - Deploy_Production
  - Smoke_Test

##BACKEND 
lint_n_audit_backend:
  stage: Build_n_Test
  script:
    - cd backend
    - npm install --dev
    - npm run lint
    # - npm run audit
    - cd ..

build_n_test_backend:
  stage: Build_n_Test
  script:
    - sudo docker stop $(sudo docker ps -aq) || echo 'No docker containers'
    - sudo docker rm $(sudo docker ps -aq) || echo 'No docker containers'
    - sudo docker run --name mongo -p 27017:27017 -d mongo:3.4
    - sudo docker build -t fyipe-project/backend:3.0.$CI_PIPELINE_IID ./backend
    - sudo docker run --name fyipe --network container:mongo fyipe-project/backend:3.0.$CI_PIPELINE_IID npm test

##DASHBOARD
lint_n_audit_dashboard:
  stage: Build_n_Test
  script:
    - cd dashboard
    - npm install --dev
    - npm run lint
    # - npm run audit
    - cd ..

build_n_test_dashboard:
  stage: Build_n_Test
  script:
   - echo "No test implemented"

## STATUS PAGE
lint_n_audit_statuspage:
  stage: Build_n_Test
  script:
    - cd status-page
    - npm install --dev
    - npm run lint
    - npm run audit
    - cd ..

build_n_test_statuspage:
  stage: Build_n_Test
  script:
   - echo "No test implemented"

## ACCOUNTS
lint_n_audit_accounts:
  stage: Build_n_Test
  script:
    - cd accounts
    - npm install --dev
    - npm run lint
    - npm run audit
    - cd ..

build_n_test_accounts:
  stage: Build_n_Test
  script:
   - echo "No test implemented"

## HOME
lint_n_audit_home:
  stage: Build_n_Test
  script:
    - cd home
    - npm install --dev
    - npm run lint
    - npm run audit
    - cd ..

build_n_test_home:
  stage: Build_n_Test
  script:
   - echo "No test implemented"

## PROBE
lint_n_audit_probe:
  stage: Build_n_Test
  script:
    - cd probe
    - npm install --dev
    - npm run lint
    - npm run audit
    - cd ..

build_n_test_probe:
  stage: Build_n_Test
  script:
   - echo "No test implemented"

##E2E Stage. 
e2e_test:
  stage: E2E_test
  script:
   - chmod +x ./kubernetes/ci/setup-machine.sh
   - ./kubernetes/ci/setup-machine.sh
   - chmod +x ./kubernetes/ci/setup.sh
   - ./kubernetes/ci/setup.sh
   - BACKEND_CONTAINER_NAME=`sudo kubectl get pods -l app=backend -o custom-columns=:metadata.name`
  only:
    refs:
      - release
      - master

deploy_staging:
  stage: Deploy_Staging
  script:
    - chmod +x ./kubernetes/ci/deployment-setup.sh
    - ./kubernetes/ci/deployment-setup.sh
    - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
    - ./kubernetes/ci/deployment-staging-setup.sh
    # Build and deploy backend.
    - sudo docker build -t fyipe-project/backend:master ./backend
    - sudo docker tag fyipe-project/backend:master registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker tag fyipe-project/backend:master registry.gitlab.com/fyipe-project/backend:master
    - sudo docker push registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker push registry.gitlab.com/fyipe-project/backend:master
    - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/backend backend=registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    # Cleanup
    - chmod +x ./kubernetes/ci/deployment-cleanup.sh
    - ./kubernetes/ci/deployment-cleanup.sh
  only:
    refs:
      - master
  environment:
    name: staging

deploy_production:
  stage: Deploy_Production
  script:
    - chmod +x ./kubernetes/ci/deployment-setup.sh
    - ./kubernetes/ci/deployment-setup.sh
    - chmod +x ./kubernetes/ci/deployment-production-setup.sh
    - ./kubernetes/ci/deployment-production-setup.sh
    - sudo docker build -t fyipe-project/backend:latest ./backend
    - sudo docker tag fyipe-project/backend:latest registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker tag fyipe-project/backend:latest registry.gitlab.com/fyipe-project/backend:latest
    - sudo docker push registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker push registry.gitlab.com/fyipe-project/backend:latest
    - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/backend backend=registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    # Cleanup
    - chmod +x ./kubernetes/ci/deployment-cleanup.sh
    - ./kubernetes/ci/deployment-cleanup.sh
  only:
    refs:
      - release
  environment:
    name: production


smoke_test_production:
  stage: Smoke_Test
  script:
    - echo "No test implemented"
  after_script:
   when: on_failure
    - echo "Rollback not implemented"
  only:
    refs:
      - release
  environment:
    name: production

smoke_test_staging:
  stage: Smoke_Test
  script:
    - echo "No test implemented"
  after_script:
   when: on_failure
    - echo "Rollback not implemented"
  only:
    refs:
      - master
  environment:
    name: production
