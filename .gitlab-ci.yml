# IMPORTANT:
#
# This CI/CD will run on an Ubuntu VM. After this script runs, the VM will retain the state.
# It's your responsibility to clean the VM up in the cleanup stage after job finishes executing.
# This script runs on Microk8s. since our deployments are on Kubernetes, our aim is to create EXACT same replica for test, staging and production.
# Define stages

stages:
  - build_n_test
  - e2e_test
  - deploy_staging
  - deploy_production

lint_n_audit_backend:
  stage: build_n_test
  script:
    - cd backend
    - eslint
    # - npm run audit

build_n_test_backend:
  stage: build_n_test
  script:
    - sudo docker stop $(sudo docker ps -aq) || echo 'No docker containers'
    - sudo docker rm $(sudo docker ps -aq) || echo 'No docker containers'
    - sudo docker run --name mongo -p 27017:27017 -d mongo:3.4
    - sudo docker build -t fyipe-project/backend:3.0.$CI_PIPELINE_IID ./backend
    - sudo docker run --name fyipe --network container:mongo fyipe-project/backend:3.0.$CI_PIPELINE_IID npm test

e2e_test:
  stage: e2e_test
  script:
   - chmod +x ./kubernetes/ci/setup-machine.sh
   - ./kubernetes/ci/setup-machine.sh
   - chmod +x ./kubernetes/ci/setup.sh
   - ./kubernetes/ci/setup.sh
   - BACKEND_CONTAINER_NAME=`sudo kubectl get pods -l app=backend -o custom-columns=:metadata.name`
  only:
    refs:
      - release
      - master

deploy_staging:
  stage: deploy_staging
  script:
    - chmod +x ./kubernetes/ci/deployment-setup.sh
    - ./kubernetes/ci/deployment-setup.sh
    - chmod +x ./kubernetes/ci/deployment-staging-setup.sh
    - ./kubernetes/ci/deployment-staging-setup.sh
    # Build and deploy backend.
    - sudo docker build -t fyipe-project/backend:master ./backend
    - sudo docker tag fyipe-project/backend:master registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker tag fyipe-project/backend:master registry.gitlab.com/fyipe-project/backend:master
    - sudo docker push registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker push registry.gitlab.com/fyipe-project/backend:master
    - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/backend backend=registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    # Cleanup
    - chmod +x ./kubernetes/ci/deployment-cleanup.sh
    - ./kubernetes/ci/deployment-cleanup.sh
  only:
    refs:
      - master
  environment:
    name: staging

deploy_production:
  stage: deploy_production
  script:
    - chmod +x ./kubernetes/ci/deployment-setup.sh
    - ./kubernetes/ci/deployment-setup.sh
    - chmod +x ./kubernetes/ci/deployment-production-setup.sh
    - ./kubernetes/ci/deployment-production-setup.sh
    - sudo docker build -t fyipe-project/backend:latest ./backend
    - sudo docker tag fyipe-project/backend:latest registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker tag fyipe-project/backend:latest registry.gitlab.com/fyipe-project/backend:latest
    - sudo docker push registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    - sudo docker push registry.gitlab.com/fyipe-project/backend:latest
    - sudo $HOME/google-cloud-sdk/bin/kubectl set image deployment/backend backend=registry.gitlab.com/fyipe-project/backend:3.0.$CI_PIPELINE_IID
    # Cleanup
    - chmod +x ./kubernetes/ci/deployment-cleanup.sh
    - ./kubernetes/ci/deployment-cleanup.sh
  only:
    refs:
      - release
  environment:
    name: production
