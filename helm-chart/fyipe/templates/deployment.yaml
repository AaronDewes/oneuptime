############-----DASHBOARD----#############################
apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ printf "%s-%s" .Release.Name "dashboard"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "dashboard"  }}
spec:
    selector:
        matchLabels:
            app: {{ printf "%s-%s" .Release.Name "dashboard"  }}
    replicas: {{ .Values.replicaCount }}
    template:
        metadata:
            labels:
                app: {{ printf "%s-%s" .Release.Name "dashboard"  }}
        spec:
            containers:
                - image: {{ printf "%s/%s/%s:%s" .Values.image.registry .Values.image.repository "dashboard" .Values.image.tag }}
                  name: {{ printf "%s-%s" .Release.Name "dashboard"  }}
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                      - name: HOST
                        value: {{ .Values.host.dashboard }}
                      - name: ACCOUNTS_HOST
                        value: {{ .Values.host.accounts }}
                      - name: BACKEND_HOST
                        value: {{ .Values.host.backend }}
                      - name: DOMAIN
                        value: {{ .Values.domain }}
                  ports:
                      - containerPort: {{ .Values.host.dashboardPort }}
                        hostPort: {{ .Values.host.dashboardPort }}
                        name: {{ printf "%s-%s" .Release.Name "dashboard"  }}
            restartPolicy: {{ .Values.image.restartPolicy }}

---
# Fyipe Dashoard Service
apiVersion: v1
kind: Service
metadata:
    labels:
        app: {{ printf "%s-%s" .Release.Name "dashboard"  }}
    name: {{ printf "%s-%s" .Release.Name "dashboard"  }}
spec:
    ports:
        - port: {{ .Values.host.dashboardServicePort }}
          protocol: TCP
          targetPort: {{ .Values.host.dashboardPort }}
    selector:
        app: {{ printf "%s-%s" .Release.Name "dashboard"  }}
    type: {{ .Values.service.type }}
---
##########################################################

############-----ACCOUNTS----#############################
apiVersion: apps/v1
kind: Deployment
metadata:
    name: accounts
    labels:
        app: accounts
spec:
    selector:
        matchLabels:
            app: accounts
    replicas: {{ .Values.replicaCount }}
    template:
        metadata:
            labels:
                app: accounts
        spec:
            containers:
                - image: {{ printf "%s/%s/%s:%s" .Values.image.registry .Values.image.repository "accounts" .Values.image.tag }}
                  name: accounts
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                      - name: HOST
                        value: {{ .Values.host.accounts }}
                      - name: DASHBOARD_HOST
                        value: {{ .Values.host.dashboard }}
                      - name: BACKEND_HOST
                        value: {{ .Values.host.backend }}
                      - name: DOMAIN
                        value: {{ .Values.domain }}
                  ports:
                      - containerPort: {{ .Values.host.accountsPort }}
                        hostPort: {{ .Values.host.accountsPort }}
                        name: accounts
            restartPolicy: {{ .Values.image.restartPolicy }}

---
# Fyipe Accounts Service
apiVersion: v1
kind: Service
metadata:
    labels:
        app: accounts
    name: accounts
spec:
    ports:
        - port: {{ .Values.host.accountsServicePort }}
          protocol: TCP
          targetPort: {{ .Values.host.accountsPort }}
    selector:
        app: accounts
    type: {{ .Values.service.type }}
---
###########################################

###########-----BACKEND------##############

# Fyipe Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ printf "%s-%s" .Release.Name "backend"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "backend"  }}
spec:
    selector:
        matchLabels:
            app: {{ printf "%s-%s" .Release.Name "backend"  }}
    replicas: {{ .Values.replicaCount }}
    template:
        metadata:
            labels:
                app: {{ printf "%s-%s" .Release.Name "backend"  }}
        spec:
            containers:
                - image: {{ printf "%s/%s/%s:%s" .Values.image.registry .Values.image.repository "backend" .Values.image.tag }}
                  name: {{ printf "%s-%s" .Release.Name "backend"  }}
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                      - name: JWT_SECRET
                        value: {{ .Values.encryption.secret }}
                      - name: MONGO_URL
                        value: {{ printf "mongodb://%s-%s:%s/fyipedb?replicaSet=%s" .Release.Name "mongo-0.default.svc.cluster.local" .Values.mongo.port .Values.mongo.replicaSetName }}
                      - name: REDIS_HOST
                        value: {{ printf "%s-%s.%s" .Release.Name "redis" "default.svc.cluster.local" }}
                      - name: REDIS_PORT
                        value: {{ .Values.redis.port }}
                      - name: PORT
                        value: {{ .Values.host.backendPort }}
                      - name: EMAIL_ENABLED
                        value: {{ .Values.fyipe.emailEnabled }}
                      - name: CALL_ENABLED
                        value: {{ .Values.fyipe.callEnabled }}
                      - name: SMS_ENABLED
                        value: {{ .Values.fyipe.smsEnabled }}
                      - name: MAIL_USER
                        value: {{ .Values.smtpMail.email }}
                      - name: MAIL_PASSWORD
                        value: {{ .Values.smtpMail.password }}
                      - name: MAIL_FROM
                        value: {{ .Values.smtpMail.fromName }}
                      - name: MAIL_SERVER_SMTP
                        value: {{ .Values.smtpMail.smtpServer }}
                      - name: MAIL_PORT_SMTP
                        value: {{ .Values.smtpMail.smtpPort }}
                      - name: MAIL_SMTP_SECURE
                        value: {{ .Values.smtpMail.smtpSecure }}
                      - name: EMAIL_VERIFY_TIME
                        value: '3600'
                      - name: BACKEND_HOST
                        value: {{ .Values.host.backend }}
                      - name: ACCOUNTS_HOST
                        value: {{ .Values.host.accounts }}
                      - name: HOME_HOST
                        value: 'https://fyipe.com'
                      - name: DASHBOARD_HOST
                        value: {{ .Values.host.dashboard }}
                      - name: NODE_ENV
                        value: 'production'
                      - name: RATE_LIMITTER_TIME_PERIOD_IN_MS
                        value: {{ .Values.rateLimitter.requestLimitTimePeriodInMS }}
                      - name: RATE_LIMITTER_REQUEST_LIMIT
                        value: {{ .Values.rateLimitter.requestLimit }}
                      - name: RATE_LIMITTER_ENABLED
                        value: {{ .Values.rateLimitter.enabled }}
                      - name: TWILIO_ACCOUNTSID
                        value: {{ .Values.twilio.accountSid }}
                      - name: TWILIO_AUTHTOKEN
                        value: {{ .Values.twilio.authToken }}
                      - name: TWILIO_NUMBER
                        value: {{ .Values.twilio.phoneNumber }}
                      - name: TWILIO_ALERT_LIMIT
                        value: {{ .Values.twilio.twilioAlertLimit }}
                  ports:
                      - containerPort: {{ .Values.host.backendPort }}
                        hostPort: {{ .Values.host.backendPort }}
                        name: {{ printf "%s-%s" .Release.Name "backend"  }}
            restartPolicy: {{ .Values.image.restartPolicy }}

---
# Fyipe Backend Deployment
apiVersion: v1
kind: Service
metadata:
    labels:
        app: {{ printf "%s-%s" .Release.Name "backend"  }}
    name: {{ printf "%s-%s" .Release.Name "backend"  }}
spec:
    ports:
        - port: {{ .Values.host.backendServicePort }}
          protocol: TCP
          targetPort: {{ .Values.host.backendPort }}
    selector:
        app: {{ printf "%s-%s" .Release.Name "backend"  }}
    type: {{ .Values.service.type }}
---
##################################################

###########-----STATUS PAGE------#################
apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ printf "%s-%s" .Release.Name "status-page"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "status-page"  }}
spec:
    selector:
        matchLabels:
            app: {{ printf "%s-%s" .Release.Name "status-page"  }}
    replicas: {{ .Values.replicaCount }}
    template:
        metadata:
            labels:
                app: {{ printf "%s-%s" .Release.Name "status-page"  }}
        spec:
            containers:
                - image: {{ printf "%s/%s/%s:%s" .Values.image.registry .Values.image.repository "status-page" .Values.image.tag }}
                  name: {{ printf "%s-%s" .Release.Name "status-page"  }}
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                      - name: HOST
                        value: {{ .Values.host.statusPage }}
                      - name: DASHBOARD_HOST
                        value: {{ .Values.host.dashboard }}
                      - name: BACKEND_HOST
                        value: {{ .Values.host.backend }}
                      - name: ACCOUNTS_HOST
                        value: {{ .Values.host.accounts }}
                  ports:
                      - containerPort: {{ .Values.host.statusPagePort }}
                        hostPort: {{ .Values.host.statusPagePort }}
                        name: {{ printf "%s-%s" .Release.Name "status-page"  }}
            restartPolicy: {{ .Values.image.restartPolicy }}
---
apiVersion: v1
kind: Service
metadata:
    labels:
        app: {{ printf "%s-%s" .Release.Name "status-page"  }}
    name: {{ printf "%s-%s" .Release.Name "status-page"  }}
spec:
    ports:
        - port: {{ .Values.host.statusPageServicePort }}
          protocol: TCP
          targetPort: {{ .Values.host.statusPagePort }}
    selector:
        app: {{ printf "%s-%s" .Release.Name "status-page"  }}
    type: {{ .Values.service.type }}
---
########################################

############-ADMIN-DASHBOARD-#########
apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
spec:
    selector:
        matchLabels:
            app: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
    replicas: {{ .Values.replicaCount }}
    template:
        metadata:
            labels:
                app: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
        spec:
            containers:
                - image: fyipeproject/admin-dashboard:latest
                  name: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                  ports:
                      - containerPort: {{ .Values.host.adminDashboardPort }}
                        hostPort: {{ .Values.host.adminDashboardPort }}
                        name: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
            restartPolicy: {{ .Values.image.restartPolicy }}
---
apiVersion: v1
kind: Service
metadata:
    labels:
        app: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
    name: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
spec:
    ports:
        - port: {{ .Values.host.adminDashboardServicePort }}
          protocol: TCP
          targetPort: {{ .Values.host.adminDashboardPort }}
    selector:
        app: {{ printf "%s-%s" .Release.Name "admin-dashboard"  }}
    type: {{ .Values.service.type }}
---
##################################

########-PROBE-1-#################
Probe service and deployement
apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ printf "%s-%s" .Release.Name "probe-1"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "probe-1"  }}
spec:
    selector:
        matchLabels:
            app: {{ printf "%s-%s" .Release.Name "probe-1"  }}
    replicas: 1 # THIS SHOULD STRICTLY BE 1
    template:
        metadata:
            labels:
                app: {{ printf "%s-%s" .Release.Name "probe-1"  }}
        spec:
            containers:
                - image: fyipeproject/probe:latest
                  name: {{ printf "%s-%s" .Release.Name "probe-1"  }}
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                      - name: SERVER_URL
                        value: {{ .Values.host.backend }}
                      - name: PORT
                        value: {{ .Values.probes.probe1.port }}
                      - name: PROBE_NAME
                        value: {{ .Values.probes.probe1.name }}
                      - name: PROBE_KEY
                        value: {{ .Values.probes.probe1.key }}
                  ports:
                      - containerPort: {{ .Values.probes.probe1.port }}
                        hostPort: {{ .Values.probes.probe1.port }}
                        name: {{ printf "%s-%s" .Release.Name "probe-1"  }}
            restartPolicy: {{ .Values.image.restartPolicy }}

---
apiVersion: v1
kind: Service
metadata:
    labels:
        app: {{ printf "%s-%s" .Release.Name "probe-1"  }}
    name: {{ printf "%s-%s" .Release.Name "probe-1"  }}
spec:
    ports:
        - port: {{ .Values.probes.probe1.servicePort }}
          protocol: TCP
          targetPort: {{ .Values.probes.probe1.port }}
    selector:
        app: {{ printf "%s-%s" .Release.Name "probe-1"  }}
    type: {{ .Values.service.type }}
---
###########################

########-PROBE-2-##########
# Probe service and deployement
apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ printf "%s-%s" .Release.Name "probe-2"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "probe-2"  }}
spec:
    selector:
        matchLabels:
            app: {{ printf "%s-%s" .Release.Name "probe-2"  }}
    replicas: 1 # THIS SHOULD STRICTLY BE 1
    template:
        metadata:
            labels:
                app: {{ printf "%s-%s" .Release.Name "probe-2"  }}
        spec:
            containers:
                - image: fyipeproject/probe:latest
                  name: {{ printf "%s-%s" .Release.Name "probe-2"  }}
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                      - name: SERVER_URL
                        value: {{ .Values.host.backend }}
                      - name: PORT
                        value: {{ .Values.probes.probe2.port }}
                      - name: PROBE_NAME
                        value: {{ .Values.probes.probe2.name }}
                      - name: PROBE_KEY
                        value: {{ .Values.probes.probe2.key }}
                  ports:
                      - containerPort:  {{ .Values.probes.probe2.port }}
                        hostPort:  {{ .Values.probes.probe2.port }}
                        name: {{ printf "%s-%s" .Release.Name "probe-2"  }}
            restartPolicy: {{ .Values.image.restartPolicy }}

---
apiVersion: v1
kind: Service
metadata:
    labels:
        app: {{ printf "%s-%s" .Release.Name "probe-2"  }}
    name: {{ printf "%s-%s" .Release.Name "probe-2"  }}
spec:
    ports:
        - port: {{ .Values.probes.probe2.servicePort }}
          protocol: TCP
          targetPort:  {{ .Values.probes.probe2.port }}
    selector:
        app: {{ printf "%s-%s" .Release.Name "probe-2"  }}
    type: {{ .Values.service.type }}
---
###########################

########-INIT-SCRIPT-##########
#########
#UPDATE: Any update to this file should also be accompanied with ./init-script/production.yaml
#########
apiVersion: batch/v1
kind: Job
metadata:
    name: init-script
spec:
    template:
        spec:
            containers:
                - image: fyipeproject/init-script:latest
                  name: init-script
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  env:
                      - name: MONGO_URL
                        value: {{ printf "mongodb://%s-%s:%s/fyipedb?replicaSet=%s" .Release.Name "mongo-0.default.svc.cluster.local" .Values.mongo.port .Values.mongo.replicaSetName }}
            restartPolicy: Never

---
####################################

############-MONGO DB-##############
# IMPORTANT: Inspiration from: https://github.com/Fyipe/k8s-mongo-sidecar
# Replicasets are configured automatically.
# You DO NEED to get into a mongo container to configre them.

apiVersion: v1
kind: ServiceAccount
metadata:
    name: {{ printf "%s-%s" .Release.Name "mongo"  }}
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
    name: {{ printf "%s-%s" .Release.Name "pod-service-reader"  }}
rules:
    - apiGroups:
          - ''
      resources:
          - pods
          - services
          - endpoints
      verbs:
          - get
          - list
          - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
    name: system:serviceaccount:default:mongo
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: {{ printf "%s-%s" .Release.Name "pod-service-reader"  }}
subjects:
    - kind: ServiceAccount
      name: {{ printf "%s-%s" .Release.Name "mongo"  }}
      namespace: default
---
apiVersion: v1
kind: Service
metadata:
    name: {{ printf "%s-%s" .Release.Name "mongo"  }}
    labels:
        name: {{ printf "%s-%s" .Release.Name "mongo"  }}
spec:
    ports:
        - port: {{ .Values.mongo.port }}
          targetPort: {{ .Values.mongo.port }}
    clusterIP: None
    selector:
        role: mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: {{ printf "%s-%s" .Release.Name "mongo"  }}
spec:
    serviceName: 'mongo'
    replicas: 1
    selector:
        matchLabels:
            role: mongo
    template:
        metadata:
            labels:
                role: mongo
                environment: test #Apparently setting this to any other var makes mongo-sidecar fail.
        spec:
            serviceAccountName: mongo
            automountServiceAccountToken: true
            terminationGracePeriodSeconds: 30
            containers:
                - name: {{ printf "%s-%s" .Release.Name "mongo"  }}
                  image: mongo:4.2.3
                  command:
                      - mongod
                  args:
                      - {{ printf "--replSet=%s" .Values.mongo.replicaSetName }}
                      - '--bind_ip=0.0.0.0'
                  ports:
                      - containerPort: {{ .Values.mongo.port }}
                  volumeMounts:
                      - name: {{ printf "%s-%s" .Release.Name "mongo-persistent-storage"  }}
                        mountPath: /data/db
                - name: {{ printf "%s-%s" .Release.Name "mongo-sidecar"  }}
                  image: morphy/k8s-mongo-sidecar
                  env:
                      - name: KUBERNETES_POD_LABELS
                        value: 'role=mongo,environment=test'
                      - name: KUBERNETES_SERVICE_NAME
                        value: 'mongo'
    volumeClaimTemplates:
        - metadata:
              name: {{ printf "%s-%s" .Release.Name "mongo-persistent-storage"  }}
          spec:
              storageClassName: {{ printf "%s-%s" .Release.Name "mongo"  }}
              accessModes: ['ReadWriteOnce']
              resources:
                  requests:
                      storage: 900Gi
---
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
    name: {{ printf "%s-%s" .Release.Name "mongo"  }}
provisioner: kubernetes.io/gce-pd
parameters:
    type: pd-ssd
---
#
#Important: Storage Class for Azure, AWS can be found here.
#https://github.com/Fyipe/k8s-mongo-sidecar/tree/master/example
#
##################################

############-REDIS-###############
apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: {{ printf "%s-%s" .Release.Name "redis"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "redis"  }}
spec:
    serviceName: 'redis'
    selector:
        matchLabels:
            app: {{ printf "%s-%s" .Release.Name "redis"  }}
            role: master
            tier: backend
    replicas: 1 #Strictly 1. We're not forming a cluster.
    template:
        metadata:
            labels:
                app: {{ printf "%s-%s" .Release.Name "redis"  }}
                role: master
                tier: backend
        spec:
            containers:
                - name: master
                  image: redis
                  resources:
                      requests:
                          cpu: 100m
                          memory: 100Mi
                  ports:
                      - containerPort: {{ .Values.redis.port }}
                  volumeMounts:
                      - name: data
                        mountPath: /data
                        readOnly: false
    volumeClaimTemplates:
        - metadata:
              name: data
          spec:
              storageClassName: {{ printf "%s-%s" .Release.Name "redis"  }}
              accessModes: ['ReadWriteOnce']
              resources:
                  requests:
                      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
    name: {{ printf "%s-%s" .Release.Name "redis"  }}
    labels:
        app: {{ printf "%s-%s" .Release.Name "redis"  }}
        role: master
        tier: backend
spec:
    ports:
        - port: {{ .Values.redis.port }}
          targetPort: {{ .Values.redis.port }}
    selector:
        app: {{ printf "%s-%s" .Release.Name "redis"  }}
        role: master
        tier: backend
---
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
    name: {{ printf "%s-%s" .Release.Name "redis"  }}
provisioner: kubernetes.io/gce-pd
parameters:
    type: pd-ssd
---
#########################################